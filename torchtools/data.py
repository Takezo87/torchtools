# AUTOGENERATED! DO NOT EDIT! File to edit: 10_data.ipynb (unless otherwise specified).

__all__ = ['plot_ts', 'TSItem', 'TSTensor', 'TensorFloat']

# Cell
import numpy as np
import torch

from fastai2.torch_basics import *
from fastai2.data.all import *

# Cell
def plot_ts(x, ax=None, title=None, **kwargs):
    '''
    plot a 2D tensor representing a timeseries
    '''
    x = x.clone().to('cpu')
    print(x.device)
    if ax is None:
#             plt.plot(x.data.transpose_(0, 1))
        plt.plot(x.transpose_(0,1))

        plt.title(title)
        plt.show()
    else:
        ax.plot(x.transpose_(0, 1))
        ax.title.set_text(title)
        ax.tick_params(
            axis='both',
            which='both',
            bottom='off',
            top='off',
            labelbottom='off',
            right='off',
            left='off',
            labelleft='off')
        return ax


# Cell
class TSItem:
    def __init__(self, data):
        '''
        basic item wrapper for 2D tensor representing a timeseries
        '''
        assert len(data.shape)==2; 'not a 2D tensor'
        self.data = data
        self.channels, self.seq_len = data.shape

    def show(self, ctx=None):
        return plot_ts(self.data)

# def show_batch(x: TSItem, y):
#     print('show_batch')
#     show_ts(x)

# Cell
class TSTensor(TensorBase):
    '''tensor wrapper for timeseries (channels, seq_length)'''
#     def show(self, ctx=None):
#         print('TSTensor show')
#         return show_ts(self.to('cpu'))

    def show(self, ctx=None):
        print('TSTensor show')
        if ctx is None:
            fig, axes = plt.subplots()
            ctx=axes

        plot_ts(self, ax=ctx);
        return ctx

# Cell
class TensorFloat(TensorBase):
    '''
    float target value of a timeseries
    ctx expected to be a `axes` object
    '''
    _show_args={}
#     def show(self, ctx=None, **kwargs):
#         if 'figsize' in kwargs: del kwargs['figsize']
#         ctx.suptitle(f'Label: {self.numpy()}', fontsize=16) ## ctx fig
#         return ctx

    def show(self, ctx=None, **kwargs):
        if 'figsize' in kwargs: del kwargs['figsize']
        assert ctx is not None; 'cannot show a label without ctx'
        ctx.set_title(f'Label: {self.numpy()}', fontsize=16) ## ctx axes object
        return ctx